
// class Node {
//   constructor(val) {
//     this.val = val;
//     this.left = null;
//     this.right = null;
//   }
// }


const maxPathSum = (root) => {
  // use recursive for path finding - best way
  //idea is to come from bottom leaf nodes
  //compare leaf nodes with thier parent and take maxValue for that to compare
  
  //leaf node - left and right are null
  if(root.left === null && root.right === null) return root.val;
  let leftNodeVal = root.left === null?-Infinity: maxPathSum(root.left);
  let rightNodeVal = root.right === null? -Infinity: maxPathSum(root.right);
  let maxChildPathSum = Math.max(leftNodeVal,rightNodeVal);
  return root.val+maxChildPathSum;
};



const a = new Node(3);
const b = new Node(11);
const c = new Node(4);
const d = new Node(4);
const e = new Node(-2);
const f = new Node(1);

a.left = b;
a.right = c;
b.left = d;
b.right = e;
c.right = f;

console.log(maxPathSum(a));
